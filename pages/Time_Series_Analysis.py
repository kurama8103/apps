# -*- coding: utf-8 -*-

import quantstats as qs
import pandas as pd
import streamlit as st

def load_csv():
    s = 'CSVファイルは1列目を時刻、2列目をデータとして認識し、他の列は無視されます。\n'
    s += '1行目は列名として認識されます。日本語名でも動作はしますが文字化けします。'
    st.text(s)

    uploaded_file = st.file_uploader("Choose a CSV file", type='csv',)
    if uploaded_file is None:    
        if 'df' in st.session_state:
            return st.session_state['df']
    else:
        qs.extend_pandas()
        df = pd.read_csv(uploaded_file, index_col=0,
                        parse_dates=True, usecols=[0, 1]).iloc[:, 0]
        st.session_state['df'] = df
        return df


def format_df(df):
    df=df.round(2)
    df.index=df.index.astype(str)
    return df

    
def tsa_render():
    st.write('CSVファイルをアップロードすると、QuantstatsのHTMLを表示します。')
    
    df=load_csv()
    if df is not None:
        if min(df) <= 0:
            pass
        else:
            dfr=df.pct_change().dropna(inplace=True)


        st.text(
            'From '+df.index[0].strftime('%Y-%m-%d')+' To '+df.index[-1].strftime('%Y-%m-%d')+'\n'+
            str((df.index[-1]-df.index[0]).days)+' days ('+
            str(round((df.index[-1]-df.index[0]).days/365,2))+' years)'
            )

        st.line_chart(df,height=200)
        
        col1, col2 = st.columns(2)
        with col1:
            l = ['cagr', 'volatility', 'sharpe', 'max_drawdown', 'skew', 'kurtosis',
                'kelly_criterion', 'value_at_risk', 'expected_shortfall']
            d = {'Cumulative Return': (df[-1]/df[0]-1).round(4)}
            for s in l:
                t = eval('df.{}()'.format(s))
                d.update({s: t.round(4)})
            st.dataframe(pd.Series(d,name='Value'))
        with col2:
            st.dataframe(format_df(df))

        # full report
        with st.spinner('Creating Full Analysis...'):
            filename_html = 'quantstats_'+df.name+'.html'
            st.download_button(
                'Download Quantstats Full Analysis', 
                data=qs_html(df, 'tmp/quantstats-tearsheet.html'), 
                file_name=filename_html)
            
        
        st.markdown(
            'Generated by [QuantStats](https://github.com/ranaroussi/quantstats)',
            unsafe_allow_html=True)

@st.cache(show_spinner=False)
def qs_html(df, download_filename):
    qs.reports.html(df, rf=0., title=df.name,
                    #download_filename=download_filename, 
                    output='./tmp/')

    with open(download_filename) as f:
        s = f.read()

    return s

tsa_render()